<!doctype html>
<meta charset="utf8">
<pre class="metadata">
title: do expressions
stage: 1
contributors: Dave Herman, Chris Krychom, Kevin Gibbons
</pre>

<emu-intro id="sec-intro">
  <h1>Introduction</h1>
  <p>`do` expressions are a syntactic construct which allows putting (some) statements in expression position without needing an immediately-invoked function expression.</p>
</emu-intro>

<emu-clause id="sec-do">
  <h1>Do Expressions</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    DoExpression[Yield, Await, Return] :
      `do` Block[?Yield, ?Await, ?Return]
  </emu-grammar>

  <emu-clause id="sec-doexpression-runtime-semantics-evaluation">
    <h1>Runtime Semantics: Evaluation</h1>
    <emu-grammar>DoExpression: `do` Block</emu-grammar>
    <emu-alg>
      1. Let _completion_ be the result of evaluating |Block|.
      1. Return Completion(UpdateEmpty(_completion_, *undefined*)).
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-doexpression-static-semantics-early-errors">
    <h1>Static Semantics: Early Errors</h1>
    <emu-grammar>DoExpression: `do` Block</emu-grammar>
    <ul>
      <li>
        TODO: a syntax error for this is contained in a loop head and contains a break or continue which would break or continue the loop.
      </li>
      <li>
        It is a Syntax Error if EndsInIterationOrDeclaration of |Block| with arguments &laquo; &raquo; and *true* is *true*.
      </li>
    </ul>
  </emu-clause>

  <emu-clause id="sec-endsiniterationordeclaration">
    <h1>Static Semantics: EndsInIterationOrDeclaration</h1>
    <p>With parameters _labelSet_ and _isLast_.</p>
    <emu-grammar>
      StatementList :
        StatementList StatementListItem
    </emu-grammar>
    <emu-alg>
      1. If IsEmpty of |StatementListItem| with argument &laquo; &raquo; is *true*, return EndsInIterationOrDeclaration of |StatementList| with arguments _labelSet_ and _isLast_.
      1. If IsBreak of |StatementListItem| with argument _labelSet_ is *true*, return EndsInIterationOrDeclaration of |StatementList| with arguments _labelSet_ and *true*.
      1. If EndsInIterationOrDeclaration of |StatementList| with arguments _labelSet_ and *false* is *true*, return *true*.
      1. Return EndsInIterationOrDeclaration of |StatementListItem| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      StatementListItem :
        Declaration

      Statement :
        VariableStatement

      LabelledItem :
        FunctionDeclaration

      BreakableStatement :
        IterationStatement
    </emu-grammar>
    <emu-alg>
      1. Return _isLast_.
    </emu-alg>
    <emu-grammar>
      Statement :
        EmptyStatement
        ExpressionStatement
        ContinueStatement
        BreakStatement
        ReturnStatement
        ThrowStatement
        DebuggerStatement

      Block :
        `{` `}`
    </emu-grammar>
    <emu-alg>
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      IfStatement :
        `if` `(` Expression `)` Statement `else` Statement
    </emu-grammar>
    <emu-alg>
      1. Let _first_ be EndsInIterationOrDeclaration of the first |Statement| with arguments _labelSet_ and _isLast_.
      1. If _first_ is *true*, return *true*.
      1. Return EndsInIterationOrDeclaration of the second |Statement| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      IfStatement :
        `if` `(` Expression `)` Statement

      WithStatement :
        `with` `(` Expression `)` Statement
    </emu-grammar>
    <emu-alg>
      1. Return EndsInIterationOrDeclaration of |Statement| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      LabelledStatement :
        LabelIdentifier `:` LabelledItem
    </emu-grammar>
    <emu-alg>
      1. If _isLast_ is *true*, then
        1. Let _label_ be the StringValue of |LabelIdentifier|.
        1. Let _newLabelSet_ be a copy of _labelSet_ with _label_ appended.
        1. Return EndsInIterationOrDeclaration of |LabelledItem| with arguments _newLabelSet_ and *true*.
      1. Return EndsInIterationOrDeclaration of |LabelledItem| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      SwitchStatement :
        `switch` `(` Expression `)` CaseBlock
    </emu-grammar>
    <emu-alg>
      1. Return EndsInIterationOrDeclaration of |CaseBlock| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      CaseBlock :
        `{` CaseClauses `}`
    </emu-grammar>
    <emu-alg>
      1. If _isLast_ is *true*, then
        1. Let _newLabelSet_ be a copy of _labelSet_ with ~empty~ appended.
      1. Else,
        1. Let _newLabelSet_ be a copy of _labelSet_ with any occurences of ~empty~ removed.
      1. Let _clauses_ be the List of |CaseClause| items in |CaseClauses|, in source text order.
      1. For each element _clause_ of _clauses_, in reverse List order, do
        1. If IsEmpty of _clause_ with argument &laquo; &raquo; is *false*, then
          1. If EndsInIterationOrDeclaration of _clause_ with arguments _newLabelSet_ and _isLast_ is *true*, return *true*.
          1. If IsBreak of _clause_ with argument _newLabelSet_ is *true*, then
            1. Set _isLast_ to *true*.
          1. Else,
            1. Set _isLast_ to *false*.
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      CaseBlock :
        `{` CaseClauses? DefaultClause CaseClauses? `}`
    </emu-grammar>
    <emu-alg>
      1. If _isLast_ is *true*, then
        1. Let _newLabelSet_ be a copy of _labelSet_ with ~empty~ appended.
      1. Else,
        1. Let _newLabelSet_ be a copy of _labelSet_ with any occurences of ~empty~ removed.
      1. If the first |CaseClauses| is present, then
        1. Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.
      1. Else,
        1. Let _A_ be &laquo; &raquo;.
      1. If the second |CaseClauses| is present, then
        1. Let _B_ be the List of |CaseClause| items in the second |CaseClauses|, in source text order.
      1. Else,
        1. Let _B_ be &laquo; &raquo;.
      1. Let _clauses_ be a List whose elements are the elements of _A_, followed by |DefaultClause|, followed by the elements of _B_.
      1. For each element _clause_ of _clauses_, in reverse List order, do
        1. If IsEmpty of _clause_ with argument &laquo; &raquo; is *false*, then
          1. If EndsInIterationOrDeclaration of _clause_ with arguments _newLabelSet_ and _isLast_ is *true*, return *true*.
          1. If IsBreak of _clause_ with argument _newLabelSet_ is *true*, then
            1. Set _isLast_ to *true*.
          1. Else,
            1. Set _isLast_ to *false*.
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      CaseClause :
        `case` Expression `:` StatementList?

      DefaultClause :
        `default` `:` StatementList?
    </emu-grammar>
    <emu-alg>
      1. If |StatementList| is not present, return *false*.
      1. Return EndsInIterationOrDeclaration of |StatementList| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      TryStatement :
        `try` Block Catch
        `try` Block Catch Finally
    </emu-grammar>
    <emu-alg>
      1. If EndsInIterationOrDeclaration of |Block| with arguments _labelSet_ and _isLast_ is *true*, return *true*.
      1. Return EndsInIterationOrDeclaration of |Catch| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      TryStatement :
        `try` Block Finally
    </emu-grammar>
    <emu-alg>
      1. Return EndsInIterationOrDeclaration of |Block| with arguments _labelSet_ and _isLast_.
    </emu-alg>
    <emu-grammar>
      Catch :
        `catch` `(` CatchParameter `)` Block
    </emu-grammar>
    <emu-alg>
      1. Return EndsInIterationOrDeclaration of |Block| with arguments _labelSet_ and _isLast_.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-isempty">
    <h1>Static Semantics: IsEmpty</h1>
    <p>With parameter _labelSet_.</p>
    <emu-note>
      <p>Here "empty" means "consisting solely of |EmptyStatement|s, |DebuggerStatement|s, |LabelledItem|s which immediately unconditionally break themselves, or |BlockStatement|s which are themselves empty".</p>
      <p>_labelSet_ is always empty when this SDO is invoked by other operations. It is used to track internally the labels which, if broken, would cause the statements being examined to be empty, as in `label: { break label; }`.</p>
    </emu-note>
    <emu-grammar>
      StatementList :
        StatementList StatementListItem
    </emu-grammar>
    <emu-alg>
      1. If IsBreak of |StatementList| with argument _labelSet_ is *true*, return *true*.
      1. If IsEmpty of |StatementListItem| with argument _labelSet_ is *false*, return *false*.
      1. Return IsEmpty of |StatementList| with argument _labelSet_.
    </emu-alg>
    <emu-grammar>
      Statement :
        EmptyStatement
        DebuggerStatement

      Block :
        `{` `}`
    </emu-grammar>
    <emu-alg>
      1. Return *true*.
    </emu-alg>
    <emu-grammar>
      StatementListItem :
        Declaration

      Statement :
        VariableStatement
        ExpressionStatement
        IfStatement
        BreakableStatement
        ContinueStatement
        ReturnStatement
        WithStatement
        ThrowStatement
        TryStatement

      LabelledItem :
        FunctionDeclaration
    </emu-grammar>
    <emu-alg>
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      CaseClause :
        `case` Expression `:` StatementList?

      DefaultClause :
        `default` `:` StatementList?
    </emu-grammar>
    <emu-alg>
      1. If |StatementList| is not present, return *true*.
      1. Return IsEmpty of |StatementList| with argument _labelSet_.
    </emu-alg>
    <emu-grammar>
      BreakStatement :
        `break` `;`
    </emu-grammar>
    <emu-alg>
      1. If ~empty~ is an element of _labelSet_, return *true*.
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      BreakStatement :
        `break` |LabelIdentifier| `;`
    </emu-grammar>
    <emu-alg>
      1. Let _label_ be the StringValue of |LabelIdentifier|.
      1. If _label_ is an element of _labelSet_, return *true*.
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      LabelledStatement :
        LabelIdentifier `:` LabelledItem
    </emu-grammar>
    <emu-alg>
      1. Let _label_ be the StringValue of |LabelIdentifier|.
      1. Let _newLabelSet_ be a copy of _labelSet_ with _label_ appended.
      1. Return IsEmpty of |LabelledItem| with argument _newLabelSet_.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-isbreak">
    <h1>Static Semantics: IsBreak</h1>
    <p>With parameter _labelSet_.</p>
    <emu-note>
      <p>This SDO answers the question "is the first non-empty statement in this Parse Node a |BreakStatement| for one of the labels in _labelSet_?". It will recurse into |BlockStatement|s but not other kinds of statement-containing statements.</p>
    </emu-note>
    <emu-grammar>
      StatementList :
        StatementList StatementListItem
    </emu-grammar>
    <emu-alg>
      1. If IsBreak of |StatementList| with argument _labelSet_ is *true*, return *true*.
      1. If IsEmpty of |StatementList| with argument &laquo; &raquo; is *false*, return *false*.
      1. Return IsBreak of |StatementListItem| with argument _labelSet_.
    </emu-alg>
    <emu-grammar>
      StatementListItem :
        Declaration

      Statement :
        VariableStatement
        EmptyStatement
        ExpressionStatement
        IfStatement
        BreakableStatement
        ContinueStatement
        ReturnStatement
        WithStatement
        LabelledStatement
        ThrowStatement
        TryStatement
        DebuggerStatement

      LabelledItem :
        FunctionDeclaration

      Block :
        `{` `}`
    </emu-grammar>
    <emu-alg>
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      CaseClause :
        `case` Expression `:` StatementList?

      DefaultClause :
        `default` `:` StatementList?
    </emu-grammar>
    <emu-alg>
      1. If |StatementList| is not present, return *false*.
      1. Return IsBreak of |StatementList| with argument _labelSet_.
    </emu-alg>
    <emu-grammar>
      BreakStatement :
        `break` `;`
    </emu-grammar>
    <emu-alg>
      1. If ~empty~ is an element of _labelSet_, return *true*.
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      BreakStatement :
        `break` |LabelIdentifier| `;`
    </emu-grammar>
    <emu-alg>
      1. Let _label_ be the StringValue of |LabelIdentifier|.
      1. If _label_ is an element of _labelSet_, return *true*.
      1. Return *false*.
    </emu-alg>
    <emu-grammar>
      LabelledStatement :
        LabelIdentifier `:` LabelledItem
    </emu-grammar>
    <emu-alg>
      1. Return IsBreak of |LabelledItem| with argument _labelSet_.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-integration">
  <h1>Integration</h1>
  <h2>Syntax</h2>
  <emu-grammar>
    PrimaryExpression[Yield, Await] :
      <ins>DoExpression[?Yield, ?Await]</ins>

    ExpressionStatement[Yield, Await] :
      [lookahead &lt;! {`{`, `function`, `async` [no |LineTerminator| here] `function`, `class`, `let` `[`, <ins>`do`</ins>}] Expression[+In, ?Yield, ?Await] `;`
  </emu-grammar>
  <emu-note><p>Note the additional lookahead for `do` in ExpressionStatements. This prevents using `do` expressions in statement position, where they are ambiguous with `do` statements.</p></emu-note>
  <h2>Semantics</h2>
  <p>TODO: thread the Return grammar parameter through the entire expression grammar. It is allowed in parameter lists and arrow expression bodies, but not class bodies. In other circumstances it's inherited from the containing statement.</p>
  <p>TODO: thread ContainsUndefinedBreakTarget and ContainsUndefinedContinueTarget through the entire expression grammar.</p>
  <p>TODO: thread VarDeclaredNames through the entire expression grammar and update existing uses (|IfStatement| etc) to use it.</p>
  <p>TODO: thread ContainsDuplicateLabels through the entire expression grammar.</p>
  <p>TODO: ban do-exprs which are inside of formal parameter lists and which Contain a |VariableStatement|. Probably needs a new SDO, sigh. (Or, reconsider banning this, I guess.)</p>
  <p>Maybe it is worth abstracting out a single "CollectDoExpressionsFromExpression" SDO that other things can be written in terms of.</p>
</emu-clause>

</emu-clause>